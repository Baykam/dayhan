// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.6.1
// source: dayhan.proto

package dayhanGrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DayhanGrpc_GetProductList_FullMethodName       = "/dayhanGrpc.DayhanGrpc/GetProductList"
	DayhanGrpc_GetProductListStream_FullMethodName = "/dayhanGrpc.DayhanGrpc/GetProductListStream"
	DayhanGrpc_ChatUsers_FullMethodName            = "/dayhanGrpc.DayhanGrpc/ChatUsers"
)

// DayhanGrpcClient is the client API for DayhanGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DayhanGrpcClient interface {
	GetProductList(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ProductListResponse, error)
	GetProductListStream(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (DayhanGrpc_GetProductListStreamClient, error)
	ChatUsers(ctx context.Context, opts ...grpc.CallOption) (DayhanGrpc_ChatUsersClient, error)
}

type dayhanGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewDayhanGrpcClient(cc grpc.ClientConnInterface) DayhanGrpcClient {
	return &dayhanGrpcClient{cc}
}

func (c *dayhanGrpcClient) GetProductList(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ProductListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductListResponse)
	err := c.cc.Invoke(ctx, DayhanGrpc_GetProductList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dayhanGrpcClient) GetProductListStream(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (DayhanGrpc_GetProductListStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DayhanGrpc_ServiceDesc.Streams[0], DayhanGrpc_GetProductListStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &dayhanGrpcGetProductListStreamClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DayhanGrpc_GetProductListStreamClient interface {
	Recv() (*ProductListResponse, error)
	grpc.ClientStream
}

type dayhanGrpcGetProductListStreamClient struct {
	grpc.ClientStream
}

func (x *dayhanGrpcGetProductListStreamClient) Recv() (*ProductListResponse, error) {
	m := new(ProductListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dayhanGrpcClient) ChatUsers(ctx context.Context, opts ...grpc.CallOption) (DayhanGrpc_ChatUsersClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DayhanGrpc_ServiceDesc.Streams[1], DayhanGrpc_ChatUsers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &dayhanGrpcChatUsersClient{ClientStream: stream}
	return x, nil
}

type DayhanGrpc_ChatUsersClient interface {
	Send(*ChatReq) error
	Recv() (*ChatRes, error)
	grpc.ClientStream
}

type dayhanGrpcChatUsersClient struct {
	grpc.ClientStream
}

func (x *dayhanGrpcChatUsersClient) Send(m *ChatReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dayhanGrpcChatUsersClient) Recv() (*ChatRes, error) {
	m := new(ChatRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DayhanGrpcServer is the server API for DayhanGrpc service.
// All implementations must embed UnimplementedDayhanGrpcServer
// for forward compatibility
type DayhanGrpcServer interface {
	GetProductList(context.Context, *EmptyRequest) (*ProductListResponse, error)
	GetProductListStream(*EmptyRequest, DayhanGrpc_GetProductListStreamServer) error
	ChatUsers(DayhanGrpc_ChatUsersServer) error
	mustEmbedUnimplementedDayhanGrpcServer()
}

// UnimplementedDayhanGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedDayhanGrpcServer struct {
}

func (UnimplementedDayhanGrpcServer) GetProductList(context.Context, *EmptyRequest) (*ProductListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductList not implemented")
}
func (UnimplementedDayhanGrpcServer) GetProductListStream(*EmptyRequest, DayhanGrpc_GetProductListStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProductListStream not implemented")
}
func (UnimplementedDayhanGrpcServer) ChatUsers(DayhanGrpc_ChatUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatUsers not implemented")
}
func (UnimplementedDayhanGrpcServer) mustEmbedUnimplementedDayhanGrpcServer() {}

// UnsafeDayhanGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DayhanGrpcServer will
// result in compilation errors.
type UnsafeDayhanGrpcServer interface {
	mustEmbedUnimplementedDayhanGrpcServer()
}

func RegisterDayhanGrpcServer(s grpc.ServiceRegistrar, srv DayhanGrpcServer) {
	s.RegisterService(&DayhanGrpc_ServiceDesc, srv)
}

func _DayhanGrpc_GetProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DayhanGrpcServer).GetProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DayhanGrpc_GetProductList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DayhanGrpcServer).GetProductList(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DayhanGrpc_GetProductListStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DayhanGrpcServer).GetProductListStream(m, &dayhanGrpcGetProductListStreamServer{ServerStream: stream})
}

type DayhanGrpc_GetProductListStreamServer interface {
	Send(*ProductListResponse) error
	grpc.ServerStream
}

type dayhanGrpcGetProductListStreamServer struct {
	grpc.ServerStream
}

func (x *dayhanGrpcGetProductListStreamServer) Send(m *ProductListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DayhanGrpc_ChatUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DayhanGrpcServer).ChatUsers(&dayhanGrpcChatUsersServer{ServerStream: stream})
}

type DayhanGrpc_ChatUsersServer interface {
	Send(*ChatRes) error
	Recv() (*ChatReq, error)
	grpc.ServerStream
}

type dayhanGrpcChatUsersServer struct {
	grpc.ServerStream
}

func (x *dayhanGrpcChatUsersServer) Send(m *ChatRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dayhanGrpcChatUsersServer) Recv() (*ChatReq, error) {
	m := new(ChatReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DayhanGrpc_ServiceDesc is the grpc.ServiceDesc for DayhanGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DayhanGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dayhanGrpc.DayhanGrpc",
	HandlerType: (*DayhanGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProductList",
			Handler:    _DayhanGrpc_GetProductList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetProductListStream",
			Handler:       _DayhanGrpc_GetProductListStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ChatUsers",
			Handler:       _DayhanGrpc_ChatUsers_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dayhan.proto",
}
